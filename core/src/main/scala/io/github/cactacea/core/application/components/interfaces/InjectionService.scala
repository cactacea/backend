package io.github.cactacea.core.application.components.interfaces

import com.twitter.util.Future
import io.github.cactacea.core.domain.enums.{ReportType, SocialAccountType}
import io.github.cactacea.core.domain.models.Authentication
import io.github.cactacea.core.infrastructure.identifiers._

trait InjectionService {
  def signedUp(authentication: Authentication): Future[Unit]
  def signedIn(authentication: Authentication): Future[Unit]
  def signedOut(sessionId: SessionId): Future[Unit]
  def displayNameUpdated(sessionId: SessionId): Future[Unit]
  def accountNameUpdated(sessionId: SessionId): Future[Unit]
  def profileUpdated(sessionId: SessionId): Future[Unit]
  def profileImageUpdated(sessionId: SessionId): Future[Unit]
  def passwordUpdated(sessionId: SessionId): Future[Unit]
  def deviceUpdated(sessionId: SessionId): Future[Unit]
  def accountReported(accountId: AccountId, reportType: ReportType, sessionId: SessionId): Future[Unit]
  def accountFollowed(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def accountUnFollowed(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def accountUnFriended(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def accountMuted(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def accountUnMuted(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def accountBlocked(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def accountUnBlocked(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def commentCreated(commentId: CommentId, sessionId: SessionId): Future[Unit]
  def commentDeleted(commentId: CommentId, sessionId: SessionId): Future[Unit]
  def commentFavorited(commentId: CommentId, sessionId: SessionId): Future[Unit]
  def commentUnFavorited(commentId: CommentId, sessionId: SessionId): Future[Unit]
  def commentReported(commentId: CommentId, reportType: ReportType, sessionId: SessionId): Future[Unit]
  def feedCreated(feedId: FeedId, sessionId: SessionId): Future[Unit]
  def feedDeleted(feedId: FeedId, sessionId: SessionId): Future[Unit]
  def feedFavorited(feedId: FeedId, sessionId: SessionId): Future[Unit]
  def feedUnFavorited(feedId: FeedId, sessionId: SessionId): Future[Unit]
  def friendRequestCreated(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def friendRequestDeleted(accountId: AccountId, sessionId: SessionId): Future[Unit]
  def friendRequestAccepted(friendRequestId: FriendRequestId, sessionId: SessionId): Future[Unit]
  def friendRequestRejected(friendRequestId: FriendRequestId, sessionId: SessionId): Future[Unit]
  def groupCreated(groupId: GroupId, sessionId: SessionId): Future[Unit]
  def groupUpdated(groupId: GroupId, sessionId: SessionId): Future[Unit]
  def groupDeleted(groupId: GroupId, sessionId: SessionId): Future[Unit]
  def groupReported(groupId: GroupId, reportType: ReportType, sessionId: SessionId): Future[Unit]
  def groupInvitationCreated(accountId: List[AccountId], groupId: GroupId, sessionId: SessionId): Future[Unit]
  def groupInvitationDeleted(accountId: AccountId, groupId: GroupId, sessionId: SessionId): Future[Unit]
  def groupInvitationAccepted(invitationId: GroupInvitationId, sessionId: SessionId): Future[Unit]
  def groupInvitationRejected(invitationId: GroupInvitationId, sessionId: SessionId): Future[Unit]
  def accountGroupJoined(groupId: GroupId, sessionId: SessionId): Future[Unit]
  def accountGroupLeft(groupId: GroupId, sessionId: SessionId): Future[Unit]
  def accountGroupJoined(accountId: AccountId, groupId: GroupId, sessionId: SessionId): Future[Unit]
  def accountGroupLeft(accountId: AccountId, groupId: GroupId, sessionId: SessionId): Future[Unit]
  def mediumCreated(mediumId: MediumId, sessionId: SessionId): Future[Unit]
  def messageCreated(messageId: MessageId, sessionId: SessionId): Future[Unit]
  def messagesDeleted(groupId: GroupId, sessionId: SessionId): Future[Unit]
  def socialAccountConnected(socialAccountType: SocialAccountType, sessionId: SessionId): Future[Unit]
  def socialAccountDisconnected(socialAccountType: SocialAccountType, sessionId: SessionId): Future[Unit]
}
